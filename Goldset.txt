//GoldSet for tomcat

//bug57715
String tTitle1 = "Finding security constraints can fail when HTTP methods are specified";
String tDesc1 = "Created attachment 32576 [details] Unit test to demonstrate the problem and a fix to the RealmBase Finding security constraints can fail when HTTP methods are specified.  When HTTP methods are defined in the security constraints, the RealmBase.findSecurityConstraints() method can terminate early without adding a constraint to the results. A simple case that demonstrates this problem is to define security constraints such that the entire web site requires authentication.  Then add one additional constraint that allows the GET HTTP method for a specific URL to bypass authentication: If an HTTP POST request is sent to the /service/foo uri, the findSecurityConstraints() method matches the ‘/service/’ URL and flags the search status as having found a match. However, when the HTTP method is examined it is found not to match and the security constraint is not added to the results. Even though the HTTP method didn’t match, the search was still flagged as finding a match and the search is terminated, returning zero constraints. This allows the POST request to proceed without authentication. A patch is attached that includes a unit test to demonstrate the problem and a fix to the RealmBase.";

//bug58581
String tTitle2 = "StandardHostValve#custom throws NPE if custom error page is incorrectly configured";
String tDesc2 = "Created attachment 33255 [details] proposed fix to avoid NPE  Minimal files to reproduce this issue: 1) create a directory named test and deploy it under webapps test ├── WEB-INF │   └── web.xml ├── error.html └── test.html the web.xml is as follows: 2 ) start tomcat and visit http://localhost:8080/test/abc.html The exception is thrown as follows: 04-Nov-2015 22:24:04.984 SEVERE [http-nio-8080-exec-1] org.apache.catalina.core.StandardHostValve.custom Exception Processing                      ErrorPage[errorCode=404, location=/error.html] java.lang.NullPointerException    at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:391)    at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:257)    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:180)    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)    at org.apache.catalina.valves.AbstractAccessLogValve.invoke (AbstractAccessLogValve.java:616)    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:361)    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:1057)    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:75)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process (AbstractProtocol.java:737)    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1531)    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)    at java.lang.Thread.run(Thread.java:745) The exception is not user-friendly, and somehow misleading. From the stack trace, user is likely to consider it as a tomcat bug.  The solution might be adding url-pattern /error.html to the default servlet, or just change the url-pattern to match all the html resources. My suggestion is to avoid such NPE and tell user what to do. I have attached a proposed fix against trunk.";

//bug58053
String tTitle3 = "Use loop rather than assuming the size of the array won't change";
String tDesc3 = "Created attachment 32835 [details] Replace numeric offsets with loop Code in FastHttpDateFormat uses numeric offsets into an array when it should use a loop. In this case the loop is no shorter than the existing 3 lines, but using a loop avoids the problem of ensuring that the array size and the max index agree.";

//bug58735
String tTitle4 = "Add support for X-XSS-Protection header";
String tDesc4 = "Created attachment 33349 [details] The patch that implements this feature. The Tomcat's HttpHeaderSecurityFilter allows to set useful security related headers but it doesn't support the X-XSS-Protection header: https://www.owasp.org/index.php/List_of_useful_HTTP_headers The attached patch enhance the filter to support this header.";

//Bug57431
String tTitle5 = "Enable custom context implementation when using embedded tomcat";
String tDesc5 = "Enable custom context class when using embedded tomcat When creating a context with the embedded tomcat it will always use the StandardContext and ignore the context class that was setup in the host. The attached patch will try to use the configured class from the host.";

//GoldSet for Ant 

//bug54026
String Title1 = "Zip task on <mappedresources> that excludes certain files by way of the mapper results in a NullPointerException";
String Desc1 = "Steps to reproduce: 1. Create a folder named `test' with the following:    test/   test/test1    test/subdir/   test/subdir/test2   (`test1' and `test2' are regular files.) 2. Create a `build.xml' with the following: 3. Run `ant'. Actual result: NullPointerException thrown in org.apache.tools.ant.taskdefs.Zip.addResources. Expected result: `ant' finishes without error and there is a new ZIP file called `destzip.zip' in the current directory. `zip -sf destzip.zip' should print: Archive contains:  subdir.orig/  subdir.orig/test2 Total 2 entries Tested in: Ant 1.8.2 and 1.8.4 on Mac OS 10.7.5.  Known work-around: Add an `excludes' attribute to the <fileset> to exclude all files not matched by the "from" glob. For the given example, `excludes=\"test1\"'.";

//bug52188
String aTitle2 = "DirectoryScanner is not threadsafe";
String aDesc2 = "We have a build target which runs several concurrent builds inside of a parallel block.  This target would intermittently through several NPE's and fail.  Long story short, I chased the NPE's back to the DirectoryScanner class.  In looking at the class it was clear that there several methods which modified the same member, and had no locking in place to prevent concurrent modification of that member.  Since applying the attached patch, we have not seen this error (several hundred builds later). Whereas without the patch, we see the failure in at least 1 out of every 10 builds";

//bug49453
String aTitle3 = "Ant get task does not interact well with transparent proxies";
String aDesc3 = "We have squid as a transparent proxy and if cache hit happens, it returns content with Content-Encoding: gzip. If the content missed from cache, it is returned normally. As result, the ant get task downloads and saves content in gzip-ed or normal form depending on cache state, and this is not what most ant scripts are expecting. Note, that in the case of cache hit, Content-Length: header is returned with length of gziped content. The more technical details on this problem are available in this Ivy bug https://issues.apache.org/jira/browse/IVY-1194 , which was also affected by this problem.";

//bug51110
String aTitle4 = "[PATCH] Ambiguous expected result from the resourceexists condition with URLResource";
String aDesc4 = "= Overview = When using a <url> as the nested resource the <resourceexists> condition, my expectation is that the condition should evaluate to true if the remote file referred to by the URL does not exist. However, the sample test case below demonstrates otherwise. Looking at the URLResource code, it seems like URLConnection.connect() is used for the evaluation. I've done some test and notice that this method returns true as long as the connection to the server can be made. I am not sure whether this is by design, but I find that in order to truly determine if the remote file exists, the URLConnection.getContent() method must be called. It is when the method returns FileNotFoundException as expected (at least for files . I assume that a call to conn.getContent() can be added to isExists() in URLResource, but I am not sure what to do with the UnknownServiceException that it throws. Perhaps someone can comment more on this to determine what the best solution is. = Steps to Reproduce = Run the following sample Ant build file on a system with Internet access.  = Actual Result = Ant build fails with the message \"Resource does not exist.\"  = Expected Result = Ant build completes \"successfully\".";

//bug52706
String aTitle5 = "[PATCH] Make Execute class extensible to allow custom CommandLauncher implementation";
String aDesc5 = "Created attachment 28353 [details] A patch to implement the enhancement Right now Execute uses a static CommandLauncher instance which is initialize inside the static initializer ("class constructor"). CommandLauncher's responsibility is to create the Process instances. Currently there isn't a way to make Execute use a different CommandLauncher I have attached a patch containing the changes I made to Execute java class. What I have basically done is move the code that initializes the CommandLauncher from the Execute class to to the CommandLauncher class. I have made CommandLauncher class public and all the subclasses of it public too.  I have added two static methods getVMLauncher and getShellLauncher to the CommandLauncher class. These methods take a Project object as parameter and check if a reference to an existing CommandLauncher is present in the project. If present then that instance is returned. Otherwise the method checks if a system property containing the name of the launcher class has been set. If so then an instance of that class is created and returned, otherwise the default launcher is returned. I have also added setVMLauncher and setShellLauncher methods that add reference to a given CommandLauncher instance to the project. I have modified the Execute class to use these two methods to get the reference of the CommandLauncher class. I have also created a CommandLauncherTask class similar to the PropertyHelperTask that takes an instance of any CommandLauncher class and adds a reference to it to the project.";

